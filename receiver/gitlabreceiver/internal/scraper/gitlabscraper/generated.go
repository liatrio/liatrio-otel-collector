// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gitlabscraper

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// MergeRequestNode includes the requested fields of the GraphQL type MergeRequest.
type MergeRequestNode struct {
	// Internal ID of the merge request.
	Iid string `json:"iid"`
	// Title of the merge request.
	Title string `json:"title"`
	// Source branch of the merge request.
	SourceBranch string `json:"sourceBranch"`
	// Target branch of the merge request.
	TargetBranch string `json:"targetBranch"`
	// Timestamp of when the merge request was created.
	CreatedAt time.Time `json:"createdAt"`
	// Timestamp of when the merge request was merged, null if not merged.
	MergedAt time.Time `json:"mergedAt"`
	// Summary of which files were changed in this merge request.
	DiffStatsSummary MergeRequestNodeDiffStatsSummary `json:"diffStatsSummary"`
}

// GetIid returns MergeRequestNode.Iid, and is useful for accessing the field via an interface.
func (v *MergeRequestNode) GetIid() string { return v.Iid }

// GetTitle returns MergeRequestNode.Title, and is useful for accessing the field via an interface.
func (v *MergeRequestNode) GetTitle() string { return v.Title }

// GetSourceBranch returns MergeRequestNode.SourceBranch, and is useful for accessing the field via an interface.
func (v *MergeRequestNode) GetSourceBranch() string { return v.SourceBranch }

// GetTargetBranch returns MergeRequestNode.TargetBranch, and is useful for accessing the field via an interface.
func (v *MergeRequestNode) GetTargetBranch() string { return v.TargetBranch }

// GetCreatedAt returns MergeRequestNode.CreatedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestNode) GetCreatedAt() time.Time { return v.CreatedAt }

// GetMergedAt returns MergeRequestNode.MergedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestNode) GetMergedAt() time.Time { return v.MergedAt }

// GetDiffStatsSummary returns MergeRequestNode.DiffStatsSummary, and is useful for accessing the field via an interface.
func (v *MergeRequestNode) GetDiffStatsSummary() MergeRequestNodeDiffStatsSummary {
	return v.DiffStatsSummary
}

// MergeRequestNodeDiffStatsSummary includes the requested fields of the GraphQL type DiffStatsSummary.
// The GraphQL type's documentation follows.
//
// Aggregated summary of changes
type MergeRequestNodeDiffStatsSummary struct {
	// Number of lines added.
	Additions int `json:"additions"`
	// Number of lines deleted.
	Deletions int `json:"deletions"`
}

// GetAdditions returns MergeRequestNodeDiffStatsSummary.Additions, and is useful for accessing the field via an interface.
func (v *MergeRequestNodeDiffStatsSummary) GetAdditions() int { return v.Additions }

// GetDeletions returns MergeRequestNodeDiffStatsSummary.Deletions, and is useful for accessing the field via an interface.
func (v *MergeRequestNodeDiffStatsSummary) GetDeletions() int { return v.Deletions }

// State of a GitLab merge request
type MergeRequestState string

const (
	// Merge request has been merged.
	MergeRequestStateMerged MergeRequestState = "merged"
	// In open state.
	MergeRequestStateOpened MergeRequestState = "opened"
	// In closed state.
	MergeRequestStateClosed MergeRequestState = "closed"
	// Discussion has been locked.
	MergeRequestStateLocked MergeRequestState = "locked"
	// All available.
	MergeRequestStateAll MergeRequestState = "all"
)

var AllMergeRequestState = []MergeRequestState{
	MergeRequestStateMerged,
	MergeRequestStateOpened,
	MergeRequestStateClosed,
	MergeRequestStateLocked,
	MergeRequestStateAll,
}

// __getBranchNamesInput is used internally by genqlient
type __getBranchNamesInput struct {
	FullPath string `json:"fullPath"`
}

// GetFullPath returns __getBranchNamesInput.FullPath, and is useful for accessing the field via an interface.
func (v *__getBranchNamesInput) GetFullPath() string { return v.FullPath }

// __getMergeRequestsInput is used internally by genqlient
type __getMergeRequestsInput struct {
	FullPath     string            `json:"fullPath"`
	After        *string           `json:"after"`
	State        MergeRequestState `json:"state"`
	CreatedAfter time.Time         `json:"createdAfter"`
}

// GetFullPath returns __getMergeRequestsInput.FullPath, and is useful for accessing the field via an interface.
func (v *__getMergeRequestsInput) GetFullPath() string { return v.FullPath }

// GetAfter returns __getMergeRequestsInput.After, and is useful for accessing the field via an interface.
func (v *__getMergeRequestsInput) GetAfter() *string { return v.After }

// GetState returns __getMergeRequestsInput.State, and is useful for accessing the field via an interface.
func (v *__getMergeRequestsInput) GetState() MergeRequestState { return v.State }

// GetCreatedAfter returns __getMergeRequestsInput.CreatedAfter, and is useful for accessing the field via an interface.
func (v *__getMergeRequestsInput) GetCreatedAfter() time.Time { return v.CreatedAfter }

// getBranchNamesProject includes the requested fields of the GraphQL type Project.
type getBranchNamesProject struct {
	// Git repository of the project.
	Repository getBranchNamesProjectRepository `json:"repository"`
}

// GetRepository returns getBranchNamesProject.Repository, and is useful for accessing the field via an interface.
func (v *getBranchNamesProject) GetRepository() getBranchNamesProjectRepository { return v.Repository }

// getBranchNamesProjectRepository includes the requested fields of the GraphQL type Repository.
type getBranchNamesProjectRepository struct {
	// Names of branches available in this repository that match the search pattern.
	BranchNames []string `json:"branchNames"`
	// Default branch of the repository.
	RootRef string `json:"rootRef"`
}

// GetBranchNames returns getBranchNamesProjectRepository.BranchNames, and is useful for accessing the field via an interface.
func (v *getBranchNamesProjectRepository) GetBranchNames() []string { return v.BranchNames }

// GetRootRef returns getBranchNamesProjectRepository.RootRef, and is useful for accessing the field via an interface.
func (v *getBranchNamesProjectRepository) GetRootRef() string { return v.RootRef }

// getBranchNamesResponse is returned by getBranchNames on success.
type getBranchNamesResponse struct {
	// Find a project.
	Project getBranchNamesProject `json:"project"`
}

// GetProject returns getBranchNamesResponse.Project, and is useful for accessing the field via an interface.
func (v *getBranchNamesResponse) GetProject() getBranchNamesProject { return v.Project }

// getMergeRequestsProject includes the requested fields of the GraphQL type Project.
type getMergeRequestsProject struct {
	// Merge requests of the project.
	MergeRequests getMergeRequestsProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`
}

// GetMergeRequests returns getMergeRequestsProject.MergeRequests, and is useful for accessing the field via an interface.
func (v *getMergeRequestsProject) GetMergeRequests() getMergeRequestsProjectMergeRequestsMergeRequestConnection {
	return v.MergeRequests
}

// getMergeRequestsProjectMergeRequestsMergeRequestConnection includes the requested fields of the GraphQL type MergeRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequest.
type getMergeRequestsProjectMergeRequestsMergeRequestConnection struct {
	// Information to aid in pagination.
	PageInfo getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []MergeRequestNode `json:"nodes"`
}

// GetPageInfo returns getMergeRequestsProjectMergeRequestsMergeRequestConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getMergeRequestsProjectMergeRequestsMergeRequestConnection) GetPageInfo() getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns getMergeRequestsProjectMergeRequestsMergeRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getMergeRequestsProjectMergeRequestsMergeRequestConnection) GetNodes() []MergeRequestNode {
	return v.Nodes
}

// getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// getMergeRequestsResponse is returned by getMergeRequests on success.
type getMergeRequestsResponse struct {
	// Find a project.
	Project getMergeRequestsProject `json:"project"`
}

// GetProject returns getMergeRequestsResponse.Project, and is useful for accessing the field via an interface.
func (v *getMergeRequestsResponse) GetProject() getMergeRequestsProject { return v.Project }

// The query executed by getBranchNames.
const getBranchNames_Operation = `
query getBranchNames ($fullPath: ID!) {
	project(fullPath: $fullPath) {
		repository {
			branchNames(searchPattern: "*", offset: 0, limit: 100000)
			rootRef
		}
	}
}
`

func getBranchNames(
	ctx_ context.Context,
	client_ graphql.Client,
	fullPath string,
) (data_ *getBranchNamesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getBranchNames",
		Query:  getBranchNames_Operation,
		Variables: &__getBranchNamesInput{
			FullPath: fullPath,
		},
	}

	data_ = &getBranchNamesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by getMergeRequests.
const getMergeRequests_Operation = `
query getMergeRequests ($fullPath: ID!, $after: String, $state: MergeRequestState, $createdAfter: Time!) {
	project(fullPath: $fullPath) {
		mergeRequests(state: $state, createdAfter: $createdAfter, after: $after) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				iid
				title
				sourceBranch
				targetBranch
				createdAt
				mergedAt
				diffStatsSummary {
					additions
					deletions
				}
			}
		}
	}
}
`

func getMergeRequests(
	ctx_ context.Context,
	client_ graphql.Client,
	fullPath string,
	after *string,
	state MergeRequestState,
	createdAfter time.Time,
) (data_ *getMergeRequestsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getMergeRequests",
		Query:  getMergeRequests_Operation,
		Variables: &__getMergeRequestsInput{
			FullPath:     fullPath,
			After:        after,
			State:        state,
			CreatedAfter: createdAfter,
		},
	}

	data_ = &getMergeRequestsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
