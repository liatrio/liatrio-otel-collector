# Query cost breakdown (highlights are the only things that cost points)
# search: 1 (even though we fetch 100 repos it is a single request)
#
# Cost = math.Floor(1 / 100) -- min 1 point
# Normalized Cost: 1 point per 100 repos
#
# REEVALUATE THIS ESTIMATE query is updated. Please update our docs if you do!
# docs: https://github.com/liatrio/liatrio-otel-collector/blob/9bb60b22b88f52f6d51a83b96e7c398d6b450dfc/pkg/receiver/gitproviderreceiver/README.md#rate-limiting
# https://docs.github.com/en/graphql/overview/rate-limits-and-node-limits-for-the-graphql-api#predicting-the-point-value-of-a-query
query getRepoDataBySearch(
  $searchQuery: String!
  # @genqlient(pointer: true)
  $repoCursor: String
) {
  search(
    query: $searchQuery
    type: REPOSITORY
    first: 100
    after: $repoCursor
  ) {
    repositoryCount
    # @genqlient(typename: "SearchNode")
    nodes {
      ... on Repository {
        id
        name
        defaultBranchRef {
          name
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}

query checkLogin($login: String!) {
  user(login: $login) {
    login
  }
  organization(login: $login) {
    login
  }
}

# Query cost breakdown (highlights are the only things that cost points)
# repository: 1
#   refs: 1 (even though we fetch $branchFrist branches it is a single request)
#     nodes:
#       target:
#         history: 1 * $commitFirst (this has to be done for each branch)
#
# Cost = math.Floor((1 + 1 + $commitFirst) / 100)
# Normalized Cost: 1 point per repo per branch per page of commits (at most 100 commits).
#
# REEVALUATE THIS ESTIMATE query is updated. Please update our docs if you do!
# docs: https://github.com/liatrio/liatrio-otel-collector/blob/9bb60b22b88f52f6d51a83b96e7c398d6b450dfc/pkg/receiver/gitproviderreceiver/README.md#rate-limiting
# https://docs.github.com/en/graphql/overview/rate-limits-and-node-limits-for-the-graphql-api#predicting-the-point-value-of-a-query
query getCommitData(
  $name: String!
  $owner: String!
  $branchFirst: Int!
  $commitFirst: Int!
  # @genqlient(pointer: true)
  $commitCursor: String
  $branchName: String!
) {
  repository(name: $name, owner: $owner) {
    refs(refPrefix: "refs/heads/", first: $branchFirst, query: $branchName) {
      # @genqlient(typename: "CommitNode")
      nodes {
        target {
          ... on Commit {
            id
            history(first: $commitFirst, after: $commitCursor) {
              edges {
                node {
                  committedDate
                  additions
                  deletions
                }
              }
              pageInfo {
                endCursor
                hasNextPage
              }
            }
          }
        }
      }
    }
  }
}


# Query cost breakdown (highlights are the only things that cost points)
# repository: 1
#   refs: 1 (even though we fetch $branchFrist branches it is a single request)
#     nodes:
#       compare: 1 * $branchFirst (this has to be done for each branch)
#
# Cost = math.Floor((1 + 1 + $branchFirst) / 100)
# Normalized Cost: 1 point per repo per 50 branches
#
# REEVALUATE THIS ESTIMATE query is updated. Please update our docs if you do!
# docs: https://github.com/liatrio/liatrio-otel-collector/blob/9bb60b22b88f52f6d51a83b96e7c398d6b450dfc/pkg/receiver/gitproviderreceiver/README.md#rate-limiting
# https://docs.github.com/en/graphql/overview/rate-limits-and-node-limits-for-the-graphql-api#predicting-the-point-value-of-a-query
query getBranchData(
  $name: String!
  $owner: String!
  $branchFirst: Int!
  $targetBranch: String!
  # @genqlient(pointer: true)
  $branchCursor: String
) {
  repository(name: $name, owner: $owner) {
    refs(refPrefix: "refs/heads/", first: $branchFirst, after: $branchCursor) {
      totalCount
      # @genqlient(typename: "BranchNode")
      nodes {
        name
        compare(headRef: $targetBranch) {
          aheadBy
          behindBy
        }
        repository{
          name
          defaultBranchRef {
            name
          }
        }
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}

# Query cost breakdown (highlights are the only things that cost points)
# repository: 1
#   pullRequests: 1 (even though we fetch $prFirst pull requests it is a single request)
#     nodes:
#       mergeCommit:
#         deployments: 1 * $prFirst (this has to be done for each pull request)
#     reviews: 1 * $prFirst (this has to be done for each pull request)
#
# Cost = math.Floor((1 + 1 + $prFirst + $prFirst) / 100)
# Normalized Cost: 1 point per repo per 50 pull requests
#
# REEVALUATE THIS ESTIMATE query is updated. Please update our docs if you do!
# docs: https://github.com/liatrio/liatrio-otel-collector/blob/9bb60b22b88f52f6d51a83b96e7c398d6b450dfc/pkg/receiver/gitproviderreceiver/README.md#rate-limiting
# https://docs.github.com/en/graphql/overview/rate-limits-and-node-limits-for-the-graphql-api#predicting-the-point-value-of-a-query
query getPullRequestData(
  $name: String!
  $owner: String!
  $prFirst: Int!
  # @genqlient(pointer: true)
  $prCursor: String
  $prStates: [PullRequestState!]
) {
  repository(name: $name, owner: $owner) {
    pullRequests(first: $prFirst, after: $prCursor, states: $prStates) {
      # @genqlient(typename: "PullRequestNode")
      nodes {
        ... on PullRequest {
          createdAt
          merged
          mergedAt
          mergeCommit {
            deployments(last: 1, orderBy: { field: CREATED_AT, direction: ASC }) {
              nodes {
                createdAt
              }
              totalCount
            }
          }
        }
        headRefName
        reviews(states: APPROVED, last: 1) {
          totalCount
          nodes {
            ... on PullRequestReview {
              createdAt
            }
          }
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}
