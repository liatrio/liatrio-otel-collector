# @genqlient(typename: "Repo")
fragment Repo on Repository {
    id
    name
    defaultBranchRef {
        name
    }
    url
}

fragment rateVals on RateLimit {
    limit
    cost
    remaining
    resetAt
}

query getRepoDataBySearch(
    $searchQuery: String!
    # @genqlient(pointer: true)
    $repoCursor: String
) {
    rateLimit {
        ...rateVals
    }
    search(
        query: $searchQuery
        type: REPOSITORY
        first: 100
        after: $repoCursor
    ) {
        repositoryCount
        # @genqlient(typename: "SearchNode")
        nodes {
            ... on Repository {
                ...Repo
            }
        }
        pageInfo {
            hasNextPage
            endCursor
        }
    }
}

query getRepoDataByTeam(
    $org: String!
    $team: String!
    # @genqlient(pointer: true)
    $repoCursor: String
) {
    rateLimit {
        ...rateVals
    }
    organization(login: $org) {
        team(slug: $team) {
            repositories(first: 100, after: $repoCursor) {
                totalCount
                # @genqlient(typename: "TeamNode")
                nodes {
                    ...Repo
                }
                pageInfo {
                    hasNextPage
                    endCursor
                }
            }
        }
    }
}

query checkLogin($login: String!) {
    rateLimit {
        ...rateVals
    }
    user(login: $login) {
        login
    }
    organization(login: $login) {
        login
    }
}

query getCommitData(
    $name: String!
    $owner: String!
    $branchFirst: Int!
    $commitFirst: Int!
    # @genqlient(pointer: true)
    $commitCursor: String
    $branchName: String!
) {
    rateLimit {
        ...rateVals
    }
    repository(name: $name, owner: $owner) {
        refs(
            refPrefix: "refs/heads/"
            first: $branchFirst
            query: $branchName
        ) {
            # @genqlient(typename: "BranchHistory")
            nodes {
                target {
                    ... on Commit {
                        id
                        history(first: $commitFirst, after: $commitCursor) {
                            # @genqlient(typename: "CommitNode")
                            nodes {
                                committedDate
                                additions
                                deletions
                            }
                            pageInfo {
                                endCursor
                                hasNextPage
                            }
                        }
                    }
                }
            }
        }
    }
}

query getBranchData(
    $name: String!
    $owner: String!
    $branchFirst: Int!
    $targetBranch: String!
    # @genqlient(pointer: true)
    $branchCursor: String
) {
    rateLimit {
        ...rateVals
    }
    repository(name: $name, owner: $owner) {
        refs(
            refPrefix: "refs/heads/"
            first: $branchFirst
            after: $branchCursor
        ) {
            totalCount
            # @genqlient(typename: "BranchNode")
            nodes {
                name
                compare(headRef: $targetBranch) {
                    aheadBy
                    behindBy
                }
                repository {
                    name
                    defaultBranchRef {
                        name
                    }
                }
            }
            pageInfo {
                endCursor
                hasNextPage
            }
        }
    }
}

query getPullRequestData(
    $name: String!
    $owner: String!
    $prFirst: Int!
    # @genqlient(pointer: true)
    $prCursor: String
    $prStates: [PullRequestState!]
) {
    rateLimit {
        ...rateVals
    }
    repository(name: $name, owner: $owner) {
        pullRequests(first: $prFirst, after: $prCursor, states: $prStates) {
            # @genqlient(typename: "PullRequestNode")
            nodes {
                ... on PullRequest {
                    createdAt
                    merged
                    mergedAt
                    mergeCommit {
                        deployments(
                            last: 1
                            orderBy: { field: CREATED_AT, direction: ASC }
                        ) {
                            nodes {
                                createdAt
                            }
                            totalCount
                        }
                    }
                }
                headRefName
                reviews(states: APPROVED, last: 1) {
                    totalCount
                    nodes {
                        ... on PullRequestReview {
                            createdAt
                        }
                    }
                }
            }
            pageInfo {
                hasNextPage
                endCursor
            }
        }
    }
}

query getRepoCVEs(
    $owner: String!
    $repo: String!
    # @genqlient(pointer: true)
    $alertCursor: String
) {
    rateLimit {
        ...rateVals
    }
    repository(owner: $owner, name: $repo) {
        # @genqlient(typename: "VulnerabilityAlerts")
        vulnerabilityAlerts(first: 100, states: OPEN, after: $alertCursor) {
            pageInfo {
                hasNextPage
                endCursor
            }
            # @genqlient(typename: "CVENode")
            nodes {
                id
                securityVulnerability {
                    severity
                }
            }
        }
    }
}
