// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package githubscraper

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// __checkLoginInput is used internally by genqlient
type __checkLoginInput struct {
	Login string `json:"login"`
}

// GetLogin returns __checkLoginInput.Login, and is useful for accessing the field via an interface.
func (v *__checkLoginInput) GetLogin() string { return v.Login }

// __getOrgRepoBranchInformationInput is used internally by genqlient
type __getOrgRepoBranchInformationInput struct {
	Login        string  `json:"login"`
	RepoCursor   *string `json:"repoCursor"`
	BranchCursor *string `json:"branchCursor"`
}

// GetLogin returns __getOrgRepoBranchInformationInput.Login, and is useful for accessing the field via an interface.
func (v *__getOrgRepoBranchInformationInput) GetLogin() string { return v.Login }

// GetRepoCursor returns __getOrgRepoBranchInformationInput.RepoCursor, and is useful for accessing the field via an interface.
func (v *__getOrgRepoBranchInformationInput) GetRepoCursor() *string { return v.RepoCursor }

// GetBranchCursor returns __getOrgRepoBranchInformationInput.BranchCursor, and is useful for accessing the field via an interface.
func (v *__getOrgRepoBranchInformationInput) GetBranchCursor() *string { return v.BranchCursor }

// __getOrgRepoDataInput is used internally by genqlient
type __getOrgRepoDataInput struct {
	Login      string  `json:"login"`
	RepoCursor *string `json:"repoCursor"`
}

// GetLogin returns __getOrgRepoDataInput.Login, and is useful for accessing the field via an interface.
func (v *__getOrgRepoDataInput) GetLogin() string { return v.Login }

// GetRepoCursor returns __getOrgRepoDataInput.RepoCursor, and is useful for accessing the field via an interface.
func (v *__getOrgRepoDataInput) GetRepoCursor() *string { return v.RepoCursor }

// __getUserRepoBranchInformationInput is used internally by genqlient
type __getUserRepoBranchInformationInput struct {
	Login string `json:"login"`
}

// GetLogin returns __getUserRepoBranchInformationInput.Login, and is useful for accessing the field via an interface.
func (v *__getUserRepoBranchInformationInput) GetLogin() string { return v.Login }

// __getUserRepoDataInput is used internally by genqlient
type __getUserRepoDataInput struct {
	Login      string  `json:"login"`
	RepoCursor *string `json:"repoCursor"`
}

// GetLogin returns __getUserRepoDataInput.Login, and is useful for accessing the field via an interface.
func (v *__getUserRepoDataInput) GetLogin() string { return v.Login }

// GetRepoCursor returns __getUserRepoDataInput.RepoCursor, and is useful for accessing the field via an interface.
func (v *__getUserRepoDataInput) GetRepoCursor() *string { return v.RepoCursor }

// checkLoginOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type checkLoginOrganization struct {
	// The organization's login name.
	Login string `json:"login"`
}

// GetLogin returns checkLoginOrganization.Login, and is useful for accessing the field via an interface.
func (v *checkLoginOrganization) GetLogin() string { return v.Login }

// checkLoginResponse is returned by checkLogin on success.
type checkLoginResponse struct {
	// Lookup a user by login.
	User checkLoginUser `json:"user"`
	// Lookup a organization by login.
	Organization checkLoginOrganization `json:"organization"`
}

// GetUser returns checkLoginResponse.User, and is useful for accessing the field via an interface.
func (v *checkLoginResponse) GetUser() checkLoginUser { return v.User }

// GetOrganization returns checkLoginResponse.Organization, and is useful for accessing the field via an interface.
func (v *checkLoginResponse) GetOrganization() checkLoginOrganization { return v.Organization }

// checkLoginUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type checkLoginUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns checkLoginUser.Login, and is useful for accessing the field via an interface.
func (v *checkLoginUser) GetLogin() string { return v.Login }

// getOrgRepoBranchInformationOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getOrgRepoBranchInformationOrganization struct {
	// A list of repositories that the user owns.
	Repositories getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns getOrgRepoBranchInformationOrganization.Repositories, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganization) GetRepositories() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnection {
	return v.Repositories
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnection struct {
	// A list of edges.
	Edges []getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge `json:"edges"`
}

// GetEdges returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnection) GetEdges() []getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge {
	return v.Edges
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge includes the requested fields of the GraphQL type RepositoryEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge struct {
	// The item at the end of the edge.
	Node getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository `json:"node"`
}

// GetNode returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge.Node, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge) GetNode() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository {
	return v.Node
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	// The name of the repository.
	Name string `json:"name"`
	// Fetch a list of refs from the repository
	Refs getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection `json:"refs"`
}

// GetName returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetName() string {
	return v.Name
}

// GetRefs returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Refs, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetRefs() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection {
	return v.Refs
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection includes the requested fields of the GraphQL type RefConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Ref.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection) GetNodes() []getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef {
	return v.Nodes
}

// GetPageInfo returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection) GetPageInfo() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo {
	return v.PageInfo
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef struct {
	// The ref name.
	Name string `json:"name"`
	// The object the ref points to. Returns null when object does not exist.
	Target getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject `json:"-"`
}

// GetName returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Name, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) GetName() string {
	return v.Name
}

// GetTarget returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Target, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) GetTarget() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject {
	return v.Target
}

func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef struct {
	Name string `json:"name"`

	Target json.RawMessage `json:"target"`
}

func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) __premarshalJSON() (*__premarshalgetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef, error) {
	var retval __premarshalgetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef

	retval.Name = v.Name
	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalgetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob.Typename, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob) GetTypename() string {
	return v.Typename
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection `json:"history"`
}

// GetTypename returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit.Typename, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) GetTypename() string {
	return v.Typename
}

// GetId returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit.Id, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) GetId() string {
	return v.Id
}

// GetHistory returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit.History, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) GetHistory() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection {
	return v.History
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of edges.
	Edges []getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection) GetEdges() []getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge {
	return v.Edges
}

// GetPageInfo returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection) GetPageInfo() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo {
	return v.PageInfo
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge includes the requested fields of the GraphQL type CommitEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge struct {
	// The item at the end of the edge.
	Node getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit `json:"node"`
}

// GetNode returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge.Node, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge) GetNode() getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit {
	return v.Node
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit struct {
	// The datetime when this commit was committed.
	CommittedDate time.Time `json:"committedDate"`
}

// GetCommittedDate returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit.CommittedDate, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit) GetCommittedDate() time.Time {
	return v.CommittedDate
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetEndCursor returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject includes the requested fields of the GraphQL interface GitObject.
//
// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject is implemented by the following types:
// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob
// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit
// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag
// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject interface {
	implementsGraphQLInterfacegetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob) implementsGraphQLInterfacegetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) implementsGraphQLInterfacegetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag) implementsGraphQLInterfacegetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree) implementsGraphQLInterfacegetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}

func __unmarshalgetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(b []byte, v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject: "%v"`, tn.TypeName)
	}
}

func __marshalgetOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob
		}{typename, v}
		return json.Marshal(result)
	case *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit
		}{typename, v}
		return json.Marshal(result)
	case *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag
		}{typename, v}
		return json.Marshal(result)
	case *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject: "%T"`, v)
	}
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag.Typename, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag) GetTypename() string {
	return v.Typename
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree.Typename, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree) GetTypename() string {
	return v.Typename
}

// getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
}

// GetEndCursor returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetStartCursor returns getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// getOrgRepoBranchInformationResponse is returned by getOrgRepoBranchInformation on success.
type getOrgRepoBranchInformationResponse struct {
	// Lookup a organization by login.
	Organization getOrgRepoBranchInformationOrganization `json:"organization"`
}

// GetOrganization returns getOrgRepoBranchInformationResponse.Organization, and is useful for accessing the field via an interface.
func (v *getOrgRepoBranchInformationResponse) GetOrganization() getOrgRepoBranchInformationOrganization {
	return v.Organization
}

// getOrgRepoDataOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getOrgRepoDataOrganization struct {
	// A list of repositories that the user owns.
	Repositories getOrgRepoDataOrganizationRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns getOrgRepoDataOrganization.Repositories, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganization) GetRepositories() getOrgRepoDataOrganizationRepositoriesRepositoryConnection {
	return v.Repositories
}

// getOrgRepoDataOrganizationRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type getOrgRepoDataOrganizationRepositoriesRepositoryConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// Information to aid in pagination.
	PageInfo getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge `json:"edges"`
}

// GetTotalCount returns getOrgRepoDataOrganizationRepositoriesRepositoryConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetPageInfo returns getOrgRepoDataOrganizationRepositoriesRepositoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnection) GetPageInfo() getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns getOrgRepoDataOrganizationRepositoriesRepositoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnection) GetEdges() []getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge {
	return v.Edges
}

// getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge includes the requested fields of the GraphQL type RepositoryEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge struct {
	// The item at the end of the edge.
	Node getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository `json:"node"`
}

// GetNode returns getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge.Node, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge) GetNode() getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository {
	return v.Node
}

// getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	Id string `json:"id"`
	// The name of the repository.
	Name string `json:"name"`
	// The Ref associated with the repository's default branch.
	DefaultBranchRef getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef `json:"defaultBranchRef"`
}

// GetId returns getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Id, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetId() string {
	return v.Id
}

// GetName returns getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetName() string {
	return v.Name
}

// GetDefaultBranchRef returns getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.DefaultBranchRef, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetDefaultBranchRef() getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef {
	return v.DefaultBranchRef
}

// getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef struct {
	// The ref name.
	Name string `json:"name"`
}

// GetName returns getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef.Name, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef) GetName() string {
	return v.Name
}

// getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataOrganizationRepositoriesRepositoryConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// getOrgRepoDataResponse is returned by getOrgRepoData on success.
type getOrgRepoDataResponse struct {
	// Lookup a organization by login.
	Organization getOrgRepoDataOrganization `json:"organization"`
}

// GetOrganization returns getOrgRepoDataResponse.Organization, and is useful for accessing the field via an interface.
func (v *getOrgRepoDataResponse) GetOrganization() getOrgRepoDataOrganization { return v.Organization }

// getUserRepoBranchInformationOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getUserRepoBranchInformationOrganization struct {
	// A list of repositories that the user owns.
	Repositories getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns getUserRepoBranchInformationOrganization.Repositories, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganization) GetRepositories() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnection {
	return v.Repositories
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnection struct {
	// A list of edges.
	Edges []getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge `json:"edges"`
}

// GetEdges returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnection) GetEdges() []getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge {
	return v.Edges
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge includes the requested fields of the GraphQL type RepositoryEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge struct {
	// The item at the end of the edge.
	Node getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository `json:"node"`
}

// GetNode returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge.Node, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdge) GetNode() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository {
	return v.Node
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	// The name of the repository.
	Name string `json:"name"`
	// Fetch a list of refs from the repository
	Refs getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection `json:"refs"`
}

// GetName returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetName() string {
	return v.Name
}

// GetRefs returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Refs, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetRefs() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection {
	return v.Refs
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection includes the requested fields of the GraphQL type RefConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Ref.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of nodes.
	Nodes []getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetNodes returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection) GetNodes() []getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef {
	return v.Nodes
}

// GetPageInfo returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnection) GetPageInfo() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo {
	return v.PageInfo
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef struct {
	// The ref name.
	Name string `json:"name"`
	// The object the ref points to. Returns null when object does not exist.
	Target getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject `json:"-"`
}

// GetName returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Name, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) GetName() string {
	return v.Name
}

// GetTarget returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Target, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) GetTarget() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject {
	return v.Target
}

func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef struct {
	Name string `json:"name"`

	Target json.RawMessage `json:"target"`
}

func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef) __premarshalJSON() (*__premarshalgetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef, error) {
	var retval __premarshalgetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef

	retval.Name = v.Name
	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalgetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob.Typename, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob) GetTypename() string {
	return v.Typename
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection `json:"history"`
}

// GetTypename returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit.Typename, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) GetTypename() string {
	return v.Typename
}

// GetId returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit.Id, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) GetId() string {
	return v.Id
}

// GetHistory returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit.History, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) GetHistory() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection {
	return v.History
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of edges.
	Edges []getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection) GetEdges() []getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge {
	return v.Edges
}

// GetPageInfo returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnection) GetPageInfo() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo {
	return v.PageInfo
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge includes the requested fields of the GraphQL type CommitEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge struct {
	// The item at the end of the edge.
	Node getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit `json:"node"`
}

// GetNode returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge.Node, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdge) GetNode() getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit {
	return v.Node
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit struct {
	// The datetime when this commit was committed.
	CommittedDate time.Time `json:"committedDate"`
}

// GetCommittedDate returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit.CommittedDate, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionEdgesCommitEdgeNodeCommit) GetCommittedDate() time.Time {
	return v.CommittedDate
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetEndCursor returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommitHistoryCommitHistoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject includes the requested fields of the GraphQL interface GitObject.
//
// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject is implemented by the following types:
// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob
// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit
// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag
// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject interface {
	implementsGraphQLInterfacegetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob) implementsGraphQLInterfacegetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit) implementsGraphQLInterfacegetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag) implementsGraphQLInterfacegetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree) implementsGraphQLInterfacegetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject() {
}

func __unmarshalgetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(b []byte, v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject: "%v"`, tn.TypeName)
	}
}

func __marshalgetUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject(v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetBlob
		}{typename, v}
		return json.Marshal(result)
	case *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetCommit
		}{typename, v}
		return json.Marshal(result)
	case *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag
		}{typename, v}
		return json.Marshal(result)
	case *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetGitObject: "%T"`, v)
	}
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag.Typename, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTag) GetTypename() string {
	return v.Typename
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree.Typename, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionNodesRefTargetTree) GetTypename() string {
	return v.Typename
}

// getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
}

// GetEndCursor returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetStartCursor returns getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationOrganizationRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryRefsRefConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// getUserRepoBranchInformationResponse is returned by getUserRepoBranchInformation on success.
type getUserRepoBranchInformationResponse struct {
	// Lookup a organization by login.
	Organization getUserRepoBranchInformationOrganization `json:"organization"`
}

// GetOrganization returns getUserRepoBranchInformationResponse.Organization, and is useful for accessing the field via an interface.
func (v *getUserRepoBranchInformationResponse) GetOrganization() getUserRepoBranchInformationOrganization {
	return v.Organization
}

// getUserRepoDataResponse is returned by getUserRepoData on success.
type getUserRepoDataResponse struct {
	// Lookup a user by login.
	User getUserRepoDataUser `json:"user"`
}

// GetUser returns getUserRepoDataResponse.User, and is useful for accessing the field via an interface.
func (v *getUserRepoDataResponse) GetUser() getUserRepoDataUser { return v.User }

// getUserRepoDataUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getUserRepoDataUser struct {
	// A list of repositories that the user owns.
	Repositories getUserRepoDataUserRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns getUserRepoDataUser.Repositories, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUser) GetRepositories() getUserRepoDataUserRepositoriesRepositoryConnection {
	return v.Repositories
}

// getUserRepoDataUserRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type getUserRepoDataUserRepositoriesRepositoryConnection struct {
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
	// A list of edges.
	Edges []getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo `json:"pageInfo"`
}

// GetTotalCount returns getUserRepoDataUserRepositoriesRepositoryConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnection) GetTotalCount() int {
	return v.TotalCount
}

// GetEdges returns getUserRepoDataUserRepositoriesRepositoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnection) GetEdges() []getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdge {
	return v.Edges
}

// GetPageInfo returns getUserRepoDataUserRepositoriesRepositoryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnection) GetPageInfo() getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo {
	return v.PageInfo
}

// getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdge includes the requested fields of the GraphQL type RepositoryEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdge struct {
	// The item at the end of the edge.
	Node getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository `json:"node"`
}

// GetNode returns getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdge.Node, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdge) GetNode() getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository {
	return v.Node
}

// getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	Id string `json:"id"`
	// The name of the repository.
	Name string `json:"name"`
	// The Ref associated with the repository's default branch.
	DefaultBranchRef getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef `json:"defaultBranchRef"`
}

// GetId returns getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Id, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetId() string {
	return v.Id
}

// GetName returns getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetName() string {
	return v.Name
}

// GetDefaultBranchRef returns getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.DefaultBranchRef, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetDefaultBranchRef() getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef {
	return v.DefaultBranchRef
}

// getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef struct {
	// The ref name.
	Name string `json:"name"`
}

// GetName returns getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef.Name, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepositoryDefaultBranchRef) GetName() string {
	return v.Name
}

// getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getUserRepoDataUserRepositoriesRepositoryConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// The query or mutation executed by checkLogin.
const checkLogin_Operation = `
query checkLogin ($login: String!) {
	user(login: $login) {
		login
	}
	organization(login: $login) {
		login
	}
}
`

func checkLogin(
	ctx context.Context,
	client graphql.Client,
	login string,
) (*checkLoginResponse, error) {
	req := &graphql.Request{
		OpName: "checkLogin",
		Query:  checkLogin_Operation,
		Variables: &__checkLoginInput{
			Login: login,
		},
	}
	var err error

	var data checkLoginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getOrgRepoBranchInformation.
const getOrgRepoBranchInformation_Operation = `
query getOrgRepoBranchInformation ($login: String!, $repoCursor: String, $branchCursor: String) {
	organization(login: $login) {
		repositories(affiliations: OWNER, first: 100, after: $repoCursor, isArchived: false, isFork: false) {
			edges {
				node {
					name
					refs(refPrefix: "refs/heads/", first: 100, after: $branchCursor) {
						totalCount
						nodes {
							name
							target {
								__typename
								... on Commit {
									id
									history {
										totalCount
										edges {
											node {
												committedDate
											}
										}
										pageInfo {
											endCursor
										}
									}
								}
							}
						}
						pageInfo {
							endCursor
							startCursor
						}
					}
				}
			}
		}
	}
}
`

func getOrgRepoBranchInformation(
	ctx context.Context,
	client graphql.Client,
	login string,
	repoCursor *string,
	branchCursor *string,
) (*getOrgRepoBranchInformationResponse, error) {
	req := &graphql.Request{
		OpName: "getOrgRepoBranchInformation",
		Query:  getOrgRepoBranchInformation_Operation,
		Variables: &__getOrgRepoBranchInformationInput{
			Login:        login,
			RepoCursor:   repoCursor,
			BranchCursor: branchCursor,
		},
	}
	var err error

	var data getOrgRepoBranchInformationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getOrgRepoData.
const getOrgRepoData_Operation = `
query getOrgRepoData ($login: String!, $repoCursor: String) {
	organization(login: $login) {
		repositories(affiliations: OWNER, first: 100, after: $repoCursor, isArchived: false, isFork: false) {
			totalCount
			pageInfo {
				endCursor
				hasNextPage
			}
			edges {
				node {
					id
					name
					defaultBranchRef {
						name
					}
				}
			}
		}
	}
}
`

func getOrgRepoData(
	ctx context.Context,
	client graphql.Client,
	login string,
	repoCursor *string,
) (*getOrgRepoDataResponse, error) {
	req := &graphql.Request{
		OpName: "getOrgRepoData",
		Query:  getOrgRepoData_Operation,
		Variables: &__getOrgRepoDataInput{
			Login:      login,
			RepoCursor: repoCursor,
		},
	}
	var err error

	var data getOrgRepoDataResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getUserRepoBranchInformation.
const getUserRepoBranchInformation_Operation = `
query getUserRepoBranchInformation ($login: String!) {
	organization(login: $login) {
		repositories(affiliations: OWNER, first: 10) {
			edges {
				node {
					name
					refs(refPrefix: "refs/heads/", first: 10) {
						totalCount
						nodes {
							name
							target {
								__typename
								... on Commit {
									id
									history {
										totalCount
										edges {
											node {
												committedDate
											}
										}
										pageInfo {
											endCursor
										}
									}
								}
							}
						}
						pageInfo {
							endCursor
							startCursor
						}
					}
				}
			}
		}
	}
}
`

func getUserRepoBranchInformation(
	ctx context.Context,
	client graphql.Client,
	login string,
) (*getUserRepoBranchInformationResponse, error) {
	req := &graphql.Request{
		OpName: "getUserRepoBranchInformation",
		Query:  getUserRepoBranchInformation_Operation,
		Variables: &__getUserRepoBranchInformationInput{
			Login: login,
		},
	}
	var err error

	var data getUserRepoBranchInformationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getUserRepoData.
const getUserRepoData_Operation = `
query getUserRepoData ($login: String!, $repoCursor: String) {
	user(login: $login) {
		repositories(affiliations: OWNER, first: 100, after: $repoCursor, isArchived: false, isFork: false) {
			totalCount
			edges {
				node {
					id
					name
					defaultBranchRef {
						name
					}
				}
			}
			pageInfo {
				endCursor
				hasNextPage
			}
		}
	}
}
`

func getUserRepoData(
	ctx context.Context,
	client graphql.Client,
	login string,
	repoCursor *string,
) (*getUserRepoDataResponse, error) {
	req := &graphql.Request{
		OpName: "getUserRepoData",
		Query:  getUserRepoData_Operation,
		Variables: &__getUserRepoDataInput{
			Login:      login,
			RepoCursor: repoCursor,
		},
	}
	var err error

	var data getUserRepoDataResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
