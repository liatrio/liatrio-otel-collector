// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gitlabscraper

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// __getProjectsInput is used internally by genqlient
type __getProjectsInput struct {
	Group string `json:"group"`
}

// GetGroup returns __getProjectsInput.Group, and is useful for accessing the field via an interface.
func (v *__getProjectsInput) GetGroup() string { return v.Group }

// getProjectsGroup includes the requested fields of the GraphQL type Group.
type getProjectsGroup struct {
	// ID of the namespace.
	Id string `json:"id"`
	// Name of the namespace.
	Name string `json:"name"`
	// Projects within this namespace.
	Projects getProjectsGroupProjectsProjectConnection `json:"projects"`
}

// GetId returns getProjectsGroup.Id, and is useful for accessing the field via an interface.
func (v *getProjectsGroup) GetId() string { return v.Id }

// GetName returns getProjectsGroup.Name, and is useful for accessing the field via an interface.
func (v *getProjectsGroup) GetName() string { return v.Name }

// GetProjects returns getProjectsGroup.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsGroup) GetProjects() getProjectsGroupProjectsProjectConnection { return v.Projects }

// getProjectsGroupProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectsGroupProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []getProjectsGroupProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns getProjectsGroupProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsGroupProjectsProjectConnection) GetNodes() []getProjectsGroupProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// getProjectsGroupProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectsGroupProjectsProjectConnectionNodesProject struct {
	// Name of the project (without namespace).
	Name string `json:"name"`
}

// GetName returns getProjectsGroupProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectsGroupProjectsProjectConnectionNodesProject) GetName() string { return v.Name }

// getProjectsResponse is returned by getProjects on success.
type getProjectsResponse struct {
	// Find a group.
	Group getProjectsGroup `json:"group"`
}

// GetGroup returns getProjectsResponse.Group, and is useful for accessing the field via an interface.
func (v *getProjectsResponse) GetGroup() getProjectsGroup { return v.Group }

// The query or mutation executed by getProjects.
const getProjects_Operation = `
query getProjects ($group: ID!) {
	group(fullPath: $group) {
		id
		name
		projects {
			nodes {
				name
			}
		}
	}
}
`

func getProjects(
	ctx context.Context,
	client graphql.Client,
	group string,
) (*getProjectsResponse, error) {
	req := &graphql.Request{
		OpName: "getProjects",
		Query:  getProjects_Operation,
		Variables: &__getProjectsInput{
			Group: group,
		},
	}
	var err error

	var data getProjectsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
