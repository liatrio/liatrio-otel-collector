// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gitlabprocessor

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// __getBlobContentInput is used internally by genqlient
type __getBlobContentInput struct {
	ProjectPath string `json:"projectPath"`
	Path        string `json:"path"`
	Ref         string `json:"ref"`
}

// GetProjectPath returns __getBlobContentInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getBlobContentInput) GetProjectPath() string { return v.ProjectPath }

// GetPath returns __getBlobContentInput.Path, and is useful for accessing the field via an interface.
func (v *__getBlobContentInput) GetPath() string { return v.Path }

// GetRef returns __getBlobContentInput.Ref, and is useful for accessing the field via an interface.
func (v *__getBlobContentInput) GetRef() string { return v.Ref }

// getBlobContentProject includes the requested fields of the GraphQL type Project.
type getBlobContentProject struct {
	// ID of the project.
	Id string `json:"id"`
	// Git repository of the project.
	Repository getBlobContentProjectRepository `json:"repository"`
}

// GetId returns getBlobContentProject.Id, and is useful for accessing the field via an interface.
func (v *getBlobContentProject) GetId() string { return v.Id }

// GetRepository returns getBlobContentProject.Repository, and is useful for accessing the field via an interface.
func (v *getBlobContentProject) GetRepository() getBlobContentProjectRepository { return v.Repository }

// getBlobContentProjectRepository includes the requested fields of the GraphQL type Repository.
type getBlobContentProjectRepository struct {
	// Blobs contained within the repository
	Blobs getBlobContentProjectRepositoryBlobsRepositoryBlobConnection `json:"blobs"`
}

// GetBlobs returns getBlobContentProjectRepository.Blobs, and is useful for accessing the field via an interface.
func (v *getBlobContentProjectRepository) GetBlobs() getBlobContentProjectRepositoryBlobsRepositoryBlobConnection {
	return v.Blobs
}

// getBlobContentProjectRepositoryBlobsRepositoryBlobConnection includes the requested fields of the GraphQL type RepositoryBlobConnection.
// The GraphQL type's documentation follows.
//
// The connection type for RepositoryBlob.
type getBlobContentProjectRepositoryBlobsRepositoryBlobConnection struct {
	// A list of nodes.
	Nodes []getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob `json:"nodes"`
}

// GetNodes returns getBlobContentProjectRepositoryBlobsRepositoryBlobConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getBlobContentProjectRepositoryBlobsRepositoryBlobConnection) GetNodes() []getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob {
	return v.Nodes
}

// getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob includes the requested fields of the GraphQL type RepositoryBlob.
type getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob struct {
	// ID of the blob.
	Id string `json:"id"`
	// Raw content of the blob.
	RawBlob string `json:"rawBlob"`
}

// GetId returns getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob.Id, and is useful for accessing the field via an interface.
func (v *getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob) GetId() string {
	return v.Id
}

// GetRawBlob returns getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob.RawBlob, and is useful for accessing the field via an interface.
func (v *getBlobContentProjectRepositoryBlobsRepositoryBlobConnectionNodesRepositoryBlob) GetRawBlob() string {
	return v.RawBlob
}

// getBlobContentResponse is returned by getBlobContent on success.
type getBlobContentResponse struct {
	// Find a project.
	Project getBlobContentProject `json:"project"`
}

// GetProject returns getBlobContentResponse.Project, and is useful for accessing the field via an interface.
func (v *getBlobContentResponse) GetProject() getBlobContentProject { return v.Project }

// The query or mutation executed by getBlobContent.
const getBlobContent_Operation = `
query getBlobContent ($projectPath: ID!, $path: String!, $ref: String) {
	project(fullPath: $projectPath) {
		id
		repository {
			blobs(paths: [$path], ref: $ref) {
				nodes {
					id
					rawBlob
				}
			}
		}
	}
}
`

func getBlobContent(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	path string,
	ref string,
) (*getBlobContentResponse, error) {
	req_ := &graphql.Request{
		OpName: "getBlobContent",
		Query:  getBlobContent_Operation,
		Variables: &__getBlobContentInput{
			ProjectPath: projectPath,
			Path:        path,
			Ref:         ref,
		},
	}
	var err_ error

	var data_ getBlobContentResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
